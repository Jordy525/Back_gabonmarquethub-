/**\n * Utilitaires pour l'intégration Socket.IO\n * Fournit des fonctions helper pour les routes et services\n */\n\n/**\n * Notifier un nouveau message dans une conversation\n * @param {Object} socketManager - Instance du SocketManager\n * @param {number} conversationId - ID de la conversation\n * @param {Object} message - Données du message\n * @param {Object} sender - Informations sur l'expéditeur\n */\nfunction notifyNewMessage(socketManager, conversationId, message, sender) {\n    if (!socketManager) {\n        console.warn('⚠️ SocketManager non disponible pour notifier le message');\n        return;\n    }\n\n    const messageData = {\n        id: message.id,\n        contenu: message.contenu,\n        expediteur_id: message.expediteur_id,\n        conversation_id: conversationId,\n        created_at: message.created_at,\n        type_message: message.type_message || 'text',\n        fichier_url: message.fichier_url,\n        metadata: message.metadata,\n        sender_name: sender.nom || sender.name || `User${sender.id}`,\n        sender_role: sender.role_id || sender.role\n    };\n\n    socketManager.broadcastToConversation(conversationId, 'message_received', {\n        message: messageData\n    });\n\n    console.log(`📨 Message ${message.id} diffusé dans conversation ${conversationId}`);\n}\n\n/**\n * Notifier qu'un message a été lu\n * @param {Object} socketManager - Instance du SocketManager\n * @param {number} conversationId - ID de la conversation\n * @param {Array|number} messageIds - ID(s) du/des message(s) lu(s)\n * @param {Object} reader - Informations sur le lecteur\n */\nfunction notifyMessageRead(socketManager, conversationId, messageIds, reader) {\n    if (!socketManager) {\n        console.warn('⚠️ SocketManager non disponible pour notifier la lecture');\n        return;\n    }\n\n    const ids = Array.isArray(messageIds) ? messageIds : [messageIds];\n\n    socketManager.broadcastToConversation(conversationId, 'messages_read', {\n        message_ids: ids,\n        reader_id: reader.id,\n        reader_name: reader.nom || reader.name || `User${reader.id}`\n    });\n\n    console.log(`👁️ Lecture de ${ids.length} message(s) notifiée dans conversation ${conversationId}`);\n}\n\n/**\n * Notifier la création d'une nouvelle conversation\n * @param {Object} socketManager - Instance du SocketManager\n * @param {Object} conversation - Données de la conversation\n * @param {Array} participants - Liste des participants\n */\nfunction notifyNewConversation(socketManager, conversation, participants) {\n    if (!socketManager) {\n        console.warn('⚠️ SocketManager non disponible pour notifier la nouvelle conversation');\n        return;\n    }\n\n    participants.forEach(participant => {\n        if (socketManager.isUserConnected(participant.id)) {\n            socketManager.sendToUser(participant.id, 'new_conversation', {\n                conversation: {\n                    id: conversation.id,\n                    sujet: conversation.sujet,\n                    statut: conversation.statut,\n                    created_at: conversation.created_at,\n                    participants: participants.map(p => ({\n                        id: p.id,\n                        nom: p.nom,\n                        role: p.role_id\n                    }))\n                }\n            });\n        }\n    });\n\n    console.log(`🆕 Nouvelle conversation ${conversation.id} notifiée à ${participants.length} participant(s)`);\n}\n\n/**\n * Notifier un changement de statut de conversation\n * @param {Object} socketManager - Instance du SocketManager\n * @param {number} conversationId - ID de la conversation\n * @param {string} newStatus - Nouveau statut\n * @param {Object} updater - Utilisateur qui a fait le changement\n */\nfunction notifyConversationStatusChange(socketManager, conversationId, newStatus, updater) {\n    if (!socketManager) {\n        console.warn('⚠️ SocketManager non disponible pour notifier le changement de statut');\n        return;\n    }\n\n    socketManager.broadcastToConversation(conversationId, 'conversation_status_changed', {\n        new_status: newStatus,\n        updated_by: {\n            id: updater.id,\n            name: updater.nom || updater.name || `User${updater.id}`\n        }\n    });\n\n    console.log(`📋 Statut de conversation ${conversationId} changé vers '${newStatus}'`);\n}\n\n/**\n * Notifier qu'un utilisateur rejoint une conversation\n * @param {Object} socketManager - Instance du SocketManager\n * @param {number} conversationId - ID de la conversation\n * @param {Object} user - Utilisateur qui rejoint\n */\nfunction notifyUserJoinedConversation(socketManager, conversationId, user) {\n    if (!socketManager) {\n        return;\n    }\n\n    socketManager.broadcastToConversation(conversationId, 'user_joined_conversation', {\n        user_id: user.id,\n        user_name: user.nom || user.name || `User${user.id}`,\n        user_role: user.role_id || user.role\n    });\n\n    console.log(`👋 Utilisateur ${user.id} a rejoint la conversation ${conversationId}`);\n}\n\n/**\n * Notifier qu'un utilisateur quitte une conversation\n * @param {Object} socketManager - Instance du SocketManager\n * @param {number} conversationId - ID de la conversation\n * @param {Object} user - Utilisateur qui quitte\n */\nfunction notifyUserLeftConversation(socketManager, conversationId, user) {\n    if (!socketManager) {\n        return;\n    }\n\n    socketManager.broadcastToConversation(conversationId, 'user_left_conversation', {\n        user_id: user.id,\n        user_name: user.nom || user.name || `User${user.id}`,\n        user_role: user.role_id || user.role\n    });\n\n    console.log(`👋 Utilisateur ${user.id} a quitté la conversation ${conversationId}`);\n}\n\n/**\n * Obtenir les statistiques Socket.IO pour le monitoring\n * @param {Object} socketManager - Instance du SocketManager\n * @returns {Object} Statistiques\n */\nfunction getSocketStats(socketManager) {\n    if (!socketManager) {\n        return {\n            available: false,\n            error: 'SocketManager non disponible'\n        };\n    }\n\n    return {\n        available: true,\n        ...socketManager.getStats()\n    };\n}\n\n/**\n * Vérifier si un utilisateur est connecté via Socket.IO\n * @param {Object} socketManager - Instance du SocketManager\n * @param {number} userId - ID de l'utilisateur\n * @returns {boolean}\n */\nfunction isUserOnline(socketManager, userId) {\n    if (!socketManager) {\n        return false;\n    }\n\n    return socketManager.isUserConnected(userId);\n}\n\n/**\n * Envoyer une notification personnalisée à un utilisateur\n * @param {Object} socketManager - Instance du SocketManager\n * @param {number} userId - ID de l'utilisateur\n * @param {string} event - Nom de l'événement\n * @param {Object} data - Données à envoyer\n */\nfunction sendNotificationToUser(socketManager, userId, event, data) {\n    if (!socketManager) {\n        console.warn(`⚠️ Impossible d'envoyer la notification '${event}' à l'utilisateur ${userId}`);\n        return false;\n    }\n\n    if (!socketManager.isUserConnected(userId)) {\n        console.log(`📱 Utilisateur ${userId} hors ligne - notification '${event}' non envoyée`);\n        return false;\n    }\n\n    socketManager.sendToUser(userId, event, data);\n    console.log(`🔔 Notification '${event}' envoyée à l'utilisateur ${userId}`);\n    return true;\n}\n\n/**\n * Middleware Express pour ajouter les utilitaires Socket.IO aux requêtes\n * @param {Object} req - Requête Express\n * @param {Object} res - Réponse Express\n * @param {Function} next - Fonction next\n */\nfunction socketMiddleware(req, res, next) {\n    const socketManager = req.app.get('socketManager');\n    \n    // Ajouter les utilitaires à la requête\n    req.socket = {\n        manager: socketManager,\n        notifyNewMessage: (conversationId, message, sender) => \n            notifyNewMessage(socketManager, conversationId, message, sender),\n        notifyMessageRead: (conversationId, messageIds, reader) => \n            notifyMessageRead(socketManager, conversationId, messageIds, reader),\n        notifyNewConversation: (conversation, participants) => \n            notifyNewConversation(socketManager, conversation, participants),\n        notifyStatusChange: (conversationId, newStatus, updater) => \n            notifyConversationStatusChange(socketManager, conversationId, newStatus, updater),\n        isUserOnline: (userId) => isUserOnline(socketManager, userId),\n        sendNotification: (userId, event, data) => \n            sendNotificationToUser(socketManager, userId, event, data),\n        getStats: () => getSocketStats(socketManager)\n    };\n\n    next();\n}\n\nmodule.exports = {\n    notifyNewMessage,\n    notifyMessageRead,\n    notifyNewConversation,\n    notifyConversationStatusChange,\n    notifyUserJoinedConversation,\n    notifyUserLeftConversation,\n    getSocketStats,\n    isUserOnline,\n    sendNotificationToUser,\n    socketMiddleware\n};"