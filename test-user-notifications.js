const axios = require('axios');
require('dotenv').config();

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

async function testUserNotifications() {
  try {
    console.log('üß™ Test du syst√®me de notifications utilisateurs...');
    console.log(`üîó URL de base: ${API_BASE_URL}`);

    // Test 1: V√©rifier que le serveur r√©pond
    console.log('\n1Ô∏è‚É£ Test de connectivit√©...');
    try {
      const healthResponse = await axios.get(`${API_BASE_URL}/api/health`);
      console.log('‚úÖ Serveur accessible:', healthResponse.data.status);
    } catch (error) {
      console.log('‚ùå Serveur non accessible:', error.message);
      return;
    }

    // Test 2: Tester l'endpoint des notifications (sans auth)
    console.log('\n2Ô∏è‚É£ Test de l\'endpoint notifications...');
    try {
      const notificationsResponse = await axios.get(`${API_BASE_URL}/api/notifications`);
      console.log('‚úÖ Endpoint accessible (sans auth)');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Endpoint prot√©g√© (401 Unauthorized) - Normal');
      } else {
        console.log('‚ùå Erreur endpoint:', error.message);
      }
    }

    // Test 3: Tester l'endpoint des compteurs
    console.log('\n3Ô∏è‚É£ Test de l\'endpoint compteurs...');
    try {
      const countsResponse = await axios.get(`${API_BASE_URL}/api/notifications/counts`);
      console.log('‚úÖ Endpoint compteurs accessible (sans auth)');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Endpoint compteurs prot√©g√© (401 Unauthorized) - Normal');
      } else {
        console.log('‚ùå Erreur endpoint compteurs:', error.message);
      }
    }

    console.log('\nüéâ Tests de l\'API termin√©s !');
    console.log('\nüìã R√©sum√©:');
    console.log('‚Ä¢ Le serveur backend fonctionne');
    console.log('‚Ä¢ Les endpoints de notifications sont accessibles');
    console.log('‚Ä¢ L\'authentification est en place');
    console.log('\nüöÄ Vous pouvez maintenant tester l\'interface utilisateur !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests
testUserNotifications().catch(console.error);
